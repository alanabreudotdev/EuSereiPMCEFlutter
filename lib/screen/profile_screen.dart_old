import 'dart:io';
import 'package:appdomoral/screen/profile_edit_screen.dart';
import 'package:flutter/material.dart';
import 'package:scoped_model/scoped_model.dart';
import '../model/user_model.dart';
import 'home_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../model/question_model.dart';
import 'package:fl_chart/fl_chart.dart';
import 'dart:async';
import '../utils/chart_pie_indicators.dart';
import 'dart:convert';
import 'package:cached_network_image/cached_network_image.dart';

class ProfileScreen extends StatefulWidget {
  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  //pie chart
  List<PieChartSectionData> pieChartRawSections;
  List<PieChartSectionData> showingSections;

  StreamController<PieTouchResponse> pieTouchedResultStreamController;
  int touchedIndex;

  //ranking
  SharedPreferences localStorage;
  int totalQuestoes = 0;
  int totalAcertos= 0;
  int totalErros = 0;
  var userUID;
  Map userDados;


  bool _isLoading = false;

  QuestionHelper helper = QuestionHelper();



  @override
  void initState()  {
    // TODO: implement initState
    setState(() {
      _isLoading = true;

    });

    setState(() {
      _isLoading = false;
    });
    super.initState();


  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        floatingActionButton: FloatingActionButton(
          child: Icon(
            Platform.isIOS ? Icons.arrow_back_ios : Icons.arrow_back,
          ),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        body:
            ScopedModelDescendant<UserModel>(builder: (context, child, model) {
          //userUID = model.firebaseUser.uid;

              _getUID();
          //model.isLoggedIn() ? model.getRanking(): null;

          return _isLoading
              ? Center(child: CircularProgressIndicator())
              : SafeArea(
                  child: ListView(
                    children: <Widget>[
                      Stack(
                        children: <Widget>[
                          Container(
                            width: double.infinity,
                            height: 330,
                            color: Colors.red,
                          ),
                          Positioned(
                              top: 10,
                              right: 30,
                              child: IconButton(
                                  icon: Icon(
                                    Icons.exit_to_app,
                                    color: Colors.white,
                                  ),
                                  onPressed: () {
                                    model.signOut();
                                    Navigator.of(context).pushReplacement(
                                        new MaterialPageRoute(
                                            builder: (context) =>
                                                HomeScreen()));
                                  })),
                          Column(
                            children: <Widget>[
                              Container(
                                  height: 90,
                                  margin: EdgeInsets.only(top: 60),
                                  child: CircleAvatar(
                                    radius: 50,
                                    backgroundColor: Colors.white,
                                    child:  userDados == null
                                        ? Image.asset(
                                        'assets/images/user_perfil.png') : (userDados['photoUrl'] == null || userDados['photoUrl'] =="")
                                            ? Image.asset(
                                                'assets/images/user_perfil.png')
                                            : Material(
                                      child: CachedNetworkImage(
                                        placeholder: (context, url) => Container(
                                          child: CircularProgressIndicator(
                                            strokeWidth: 2.0,
                                            valueColor: AlwaysStoppedAnimation<Color>(Colors.amber),
                                          ),
                                          width: 90.0,
                                          height: 90.0,
                                          padding: EdgeInsets.all(20.0),
                                        ),
                                        imageUrl:  userDados["photoUrl"],
                                        width: 90.0,
                                        height: 90.0,
                                        fit: BoxFit.cover,
                                      ),
                                      borderRadius: BorderRadius.all(Radius.circular(45.0)),
                                      clipBehavior: Clip.hardEdge,
                                    )

                                  ),
                              ),
                              Padding(
                                padding: EdgeInsets.all(4),
                              ),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: <Widget>[
                                  Text(
                                "${!model.isLoggedIn() ? "#VouSerBizurado" :
                                userDados != null ? userDados["name"] != null ? userDados["name"] : 'Futuro(a) Polícial' : "#VouSerBizurado"}",
                                style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.w500,
                                    fontSize: 20),
                                textAlign: TextAlign.center,
                              ),
                              SizedBox(width: 10,),
                              InkWell(
                                onTap: (){
                                   Navigator.of(context).pushReplacement(
                                        new MaterialPageRoute(
                                            builder: (context) =>
                                                ProfileEditScreen()));
                                },
                                child: Icon(Icons.edit, color: Colors.white),
                              ),
                                ],
                              ),
                              Padding(
                                padding: EdgeInsets.all(4),
                              ),
                              Container(
                                margin: EdgeInsets.only(top: 77),
                                padding: EdgeInsets.all(10),
                                child: AspectRatio(
                                  aspectRatio: 1.2,
                                  child: Card(
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                            top: 8.0, left: 8.0, right: 8.0),
                                        child: Column(
                                          children: <Widget>[
                                            Container(
                                              alignment: Alignment.topLeft,
                                              child: Text(
                                                "Estatística Geral Questões",
                                                style: TextStyle(
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 16,
                                                ),
                                                textAlign: TextAlign.left,
                                              ),
                                            ),
                                            Divider(
                                              color: Colors.black38,
                                            ),
                                             Row(
                                              children: <Widget>[
                                                SizedBox(
                                                  height: 0,
                                                ),
                                                Expanded(
                                                  child: AspectRatio(
                                                    aspectRatio: 1.0,
                                                    child:  totalQuestoes > 0 ?  FlChart(
                                                      chart: PieChart(
                                                        PieChartData(
                                                            pieTouchData: PieTouchData(
                                                                touchResponseStreamSink:
                                                                    pieTouchedResultStreamController
                                                                        .sink),
                                                            borderData:
                                                                FlBorderData(
                                                              show: false,
                                                            ),
                                                            sectionsSpace: 0,
                                                            centerSpaceRadius:
                                                                40,
                                                            sections:
                                                                showingSections),
                                                      ),
                                                    ):Container(),
                                                  ),
                                                ),
                                                Padding(
                                                  padding:
                                                      const EdgeInsets.all(8.0),
                                                  child: Column(
                                                    mainAxisSize:
                                                        MainAxisSize.max,
                                                    mainAxisAlignment:
                                                        MainAxisAlignment.end,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment
                                                            .start,
                                                    children: <Widget>[
                                                      Indicator(
                                                        color:
                                                            Color(0xff0293ee),
                                                        text: "Total",
                                                        isSquare: true,
                                                      ),
                                                      SizedBox(
                                                        height: 4,
                                                      ),
                                                      Indicator(
                                                        color:
                                                            Color(0xff4CAF50),
                                                        text: "Acertos",
                                                        isSquare: true,
                                                      ),
                                                      SizedBox(
                                                        height: 4,
                                                      ),
                                                      Indicator(
                                                        color:
                                                            Color(0xfff44336),
                                                        text: "Erros",
                                                        isSquare: true,
                                                      ),
                                                      SizedBox(
                                                        height: 18,
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ],
                                        ),
                                      )),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.all(10),
                                child: Column(
                                  children: <Widget>[
                                    Card(
                                      child: Container(
                                        alignment: Alignment.topLeft,
                                        padding: EdgeInsets.all(15),
                                        child: Column(
                                          children: <Widget>[
                                            Container(
                                              alignment: Alignment.topLeft,
                                              child: Text(
                                                "Informações do Usuário",
                                                style: TextStyle(
                                                  fontWeight: FontWeight.w500,
                                                  fontSize: 16,
                                                ),
                                                textAlign: TextAlign.left,
                                              ),
                                            ),
                                            Divider(
                                              color: Colors.black38,
                                            ),
                                            Container(
                                                child: Column(
                                              children: <Widget>[
                                                ListTile(
                                                  leading: Icon(Icons.email),
                                                  title: Text("Email"),
                                                  subtitle: Text(
                                                      "${!model.isLoggedIn() ? "#VouSerBizurado" : model.userData['email'] != null ? model.userData['email'] : 'sem email'}"),
                                                ),
                                                /*ListTile(
                                leading: Icon(Icons.phone),
                                title: Text("Phone"),
                                subtitle: Text("99--99876-56"),
                              ),
                              ListTile(
                                leading: Icon(Icons.person),
                                title: Text("About Me"),
                                subtitle: Text(
                                    "This is a about me link and you can khow about me in this section."),
                              ),*/
                                              ],
                                            ))
                                          ],
                                        ),
                                      ),
                                    ),

                                  ],
                                ),
                              ),
                            ],
                          )
                        ],
                      ),
                    ],
                  ),
                );
        }));
  }

  //CONTA O TOTAL DE VEZES QUE O USUARIO RESOLVEU A QUESTAO
  void _getQstTotalResolvidas(userId) async {
    await helper.getTotalQuestionsResolvidasByUser(userId).then((list) {
       
          totalQuestoes = list;
        
        print(totalQuestoes);

    });
  }

  //CONTA O TOTAL DE VEZES QUE O USUARIO ACERTOU A QUESTAO
  void _getQstTotalAcertos(userId) async {
    print('ACErtos USERID: $userId');
    await helper.getTotalQstResolvidasByAcertos(userId).then((list) {
        setState(() {
          totalAcertos = list;
        });

        print("TOTAL ACERTOS: totalAcertos");

    });
  }

  //CONTA O TOTAL DE VEZES QUE O USUARIO ACERTOU A QUESTAO
  void _getQstTotalErros(userId) async {
    await helper.getTotalQstResolvidasByErros(userId).then((list) {

        totalErros = list;
        print(totalErros);

    });
  }

  void _getUID() async{
      localStorage = await SharedPreferences.getInstance();
      String dados = await localStorage.getString('userDados');
      print("AQUI VAI os DADOS: $dados");
      userDados = jsonDecode(dados);
      userUID = userDados["UID"];

    print("USUARIO ID ${userDados["UID"]}");

    _getDataDB(userUID);

  }

   _getDataDB(String userID) async {

      await _getQstTotalAcertos(userID);
      await _getQstTotalErros(userID);
      await _getQstTotalResolvidas(userID);

    print("Total: $totalQuestoes");

      if(totalQuestoes > 0){
        getPieChart();
      }

  }

  Future getPieChart() async {
    final section1 = PieChartSectionData(
      color: Color(0xff0293ee),
      value: totalQuestoes.toDouble(),
      title: totalQuestoes.toString(),
      radius: 50,
      titleStyle: TextStyle(
          fontSize: 16, fontWeight: FontWeight.bold, color: Color(0xffffffff)),
    );

    final section2 = PieChartSectionData(
      color: Color(0xff4CAF50),
      value: totalAcertos.toDouble(),
      title: totalAcertos.toString(),
      radius: 50,
      titleStyle: TextStyle(
          fontSize: 16, fontWeight: FontWeight.bold, color: Color(0xffffffff)),
    );

    final section3 = PieChartSectionData(
      color: Color(0xfff44336),
      value: totalErros.toDouble(),
      title: totalErros.toString(),
      radius: 50,
      titleStyle: TextStyle(
          fontSize: 16, fontWeight: FontWeight.bold, color: Color(0xffffffff)),
    );

    final items = [
      section1,
      section2,
      section3,
    ];

    pieChartRawSections = items;

    showingSections = pieChartRawSections;

    pieTouchedResultStreamController = StreamController();
    pieTouchedResultStreamController.stream.distinct().listen((details) {
      if (details == null) {
        return;
      }

      touchedIndex = -1;
      if (details.sectionData != null) {
        touchedIndex = showingSections.indexOf(details.sectionData);
      }

      setState(() {
        if (details.touchInput is FlLongPressEnd) {
          touchedIndex = -1;
          showingSections = List.of(pieChartRawSections);
        } else {
          showingSections = List.of(pieChartRawSections);

          if (touchedIndex != -1) {
            final TextStyle style = showingSections[touchedIndex].titleStyle;
            showingSections[touchedIndex] =
                showingSections[touchedIndex].copyWith(
              titleStyle: style.copyWith(
                fontSize: 24,
              ),
              radius: 60,
            );
          }
        }
      });
    });
  }
}
